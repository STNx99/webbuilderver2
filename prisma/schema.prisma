generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Element {
  Content        String?
  Href           String?
  Id             String    @id @map("Id")
  Name           String?
  Order          Int       @default(0)
  ParentId       String?
  ProjectId      String
  Src            String?
  Styles         Json?
  TailwindStyles String?
  Type           String    @db.VarChar(32)
  PageId         String?
  Page           Page?     @relation(fields: [PageId], references: [Id], onDelete: Cascade)
  Parent         Element?  @relation("ElementChildren", fields: [ParentId], references: [Id], onDelete: Cascade)
  Elements       Element[] @relation("ElementChildren")
  Project        Project   @relation(fields: [ProjectId], references: [Id], onDelete: Cascade)
  Settings       Setting?  @relation("ElementSettings")

  @@index([ParentId])
  @@index([PageId])
  @@index([ProjectId, Order])
}

model Image {
  ImageId   String    @id(map: "PK_Images")
  ImageLink String    @default("")
  ImageName String?
  UserId    String
  CreatedAt DateTime  @db.Timestamp(6)
  DeletedAt DateTime? @db.Timestamp(6)
  UpdatedAt DateTime  @db.Timestamp(6)
  User      User      @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Images_Users_UserId")

  @@index([UserId], map: "IX_Images_UserId")
}

model Project {
  Description String?
  Id          String     @id(map: "PK_Projects")
  Name        String
  OwnerId     String
  Published   Boolean    @default(false)
  Subdomain   String?
  CreatedAt   DateTime   @db.Timestamp(6)
  DeletedAt   DateTime?  @db.Timestamp(6)
  UpdatedAt   DateTime   @db.Timestamp(6)
  Styles      Json?
  Header      Json?
  Elements    Element[]
  Pages       Page[]
  Owner       User       @relation(fields: [OwnerId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Projects_Users_OwnerId")
  Snapshots   Snapshot[]
  MarketplaceItems MarketplaceItem[] // Projects that were turned into marketplace templates

  @@index([OwnerId], map: "IX_Projects_OwnerId")
}

model Page {
  Id        String    @id @map("Id")
  Name      String
  Type      String
  Styles    Json
  ProjectId String
  CreatedAt DateTime  @db.Timestamp(6)
  UpdatedAt DateTime  @db.Timestamp(6)
  DeletedAt DateTime? @db.Timestamp(6)
  Elements  Element[]
  Project   Project   @relation(fields: [ProjectId], references: [Id], onDelete: Cascade)

  @@unique([ProjectId, Name])
  @@index([ProjectId])
}

model Setting {
  ElementId   String  @unique
  Id          String  @id(map: "PK_Settings")
  Name        String
  SettingType String
  Settings    Json
  Element     Element @relation("ElementSettings", fields: [ElementId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Settings_Elements_ElementId")

  @@index([ElementId], map: "IX_Settings_ElementId")
}

model Snapshot {
  Id        String   @id @map("Id")
  ProjectId String
  Elements  Json
  Timestamp BigInt
  CreatedAt DateTime @default(now()) @db.Timestamp(6)
  Project   Project  @relation(fields: [ProjectId], references: [Id], onDelete: Cascade)

  @@index([ProjectId, Timestamp])
}

model User {
  CreatedAt       DateTime          @db.Timestamptz(6)
  Email           String
  FirstName       String?
  Id              String            @id(map: "PK_Users")
  ImageUrl        String?
  LastName        String?
  UpdatedAt       DateTime          @db.Timestamptz(6)
  Images          Image[]
  Projects        Project[]
  MarketplaceItems MarketplaceItem[]
}

model ContentType {
  CreatedAt   DateTime       @default(now())
  Description String?
  Id          String         @id @default(cuid())
  Name        String         @unique
  UpdatedAt   DateTime       @updatedAt
  Fields      ContentField[]
  Items       ContentItem[]
}

model ContentField {
  ContentTypeId String
  Id            String              @id @default(cuid())
  Name          String
  Required      Boolean             @default(false)
  Type          String
  ContentType   ContentType         @relation(fields: [ContentTypeId], references: [Id], onDelete: Cascade)
  Values        ContentFieldValue[]

  @@unique([ContentTypeId, Name])
}

model ContentFieldValue {
  ContentItemId String
  FieldId       String
  Id            String       @id @default(cuid())
  Value         String?
  ContentItem   ContentItem  @relation(fields: [ContentItemId], references: [Id], onDelete: Cascade)
  Field         ContentField @relation(fields: [FieldId], references: [Id], onDelete: Cascade)

  @@unique([ContentItemId, FieldId])
}

model ContentItem {
  ContentTypeId String
  CreatedAt     DateTime            @default(now())
  Id            String              @id @default(cuid())
  Published     Boolean             @default(false)
  Slug          String              @unique
  Title         String
  UpdatedAt     DateTime            @updatedAt
  FieldValues   ContentFieldValue[]
  ContentType   ContentType         @relation(fields: [ContentTypeId], references: [Id], onDelete: Cascade)
}

model MarketplaceItem {
  Id           String                      @id @default(cuid())
  Title        String
  Description  String
  Preview      String?
  TemplateType String                      @default("block") // "full-site" | "page" | "section" | "block"
  Featured     Boolean                     @default(false)
  PageCount    Int?
  Downloads    Int                         @default(0)
  Likes        Int                         @default(0)
  AuthorId     String
  AuthorName   String
  Verified     Boolean                     @default(false)
  ProjectId    String?                     // Reference to the original project this template is based on
  CreatedAt    DateTime                    @default(now()) @db.Timestamp(6)
  UpdatedAt    DateTime                    @updatedAt @db.Timestamp(6)
  DeletedAt    DateTime?                   @db.Timestamp(6)
  Author       User                        @relation(fields: [AuthorId], references: [Id], onDelete: Cascade)
  Project      Project?                    @relation(fields: [ProjectId], references: [Id], onDelete: SetNull)
  Tags         MarketplaceItemTag[]
  Categories   MarketplaceItemCategory[]

  @@index([AuthorId])
  @@index([TemplateType])
  @@index([Featured])
  @@index([ProjectId])
}

model Category {
  Id    String                    @id @default(cuid())
  Name  String                    @unique
  Items MarketplaceItemCategory[]
}

model Tag {
  Id    String               @id @default(cuid())
  Name  String               @unique
  Items MarketplaceItemTag[]
}

model MarketplaceItemTag {
  ItemId String
  TagId  String
  Item   MarketplaceItem @relation(fields: [ItemId], references: [Id], onDelete: Cascade)
  Tag    Tag             @relation(fields: [TagId], references: [Id], onDelete: Cascade)

  @@id([ItemId, TagId])
  @@index([TagId])
}

model MarketplaceItemCategory {
  ItemId     String
  CategoryId String
  Item       MarketplaceItem @relation(fields: [ItemId], references: [Id], onDelete: Cascade)
  Category   Category        @relation(fields: [CategoryId], references: [Id], onDelete: Cascade)

  @@id([ItemId, CategoryId])
  @@index([CategoryId])
}
