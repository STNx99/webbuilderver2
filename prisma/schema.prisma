generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Element {
  Id             String    @id @map("Id")
  Type           String    @db.VarChar(32)
  Content        String?
  Name           String?
  Styles         Json?
  TailwindStyles String?
  Src            String?
  Href           String?
  ParentId       String?
  PageId         String?  
  ProjectId      String
  Order          Int       @default(0)
  CreatedAt      DateTime  @db.Timestamp(6)
  UpdatedAt      DateTime  @db.Timestamp(6)
  DeletedAt      DateTime? @db.Timestamp(6)
  Settings       Setting?  @relation("ElementSettings")
  Elements       Element[] @relation("ElementChildren")
  Parent         Element?  @relation("ElementChildren", fields: [ParentId], references: [Id])
  Page           Page?      @relation(fields: [PageId], references: [Id], onDelete: Cascade)
  Project        Project   @relation(fields: [ProjectId], references: [Id], onDelete: Cascade)

  @@index([ParentId])
  @@index([PageId])
  @@index([ProjectId, Order])
}

model Image {
  ImageId   String    @id(map: "PK_Images")
  ImageName String?
  UserId    String
  ImageLink String    @default("")
  CreatedAt DateTime  @db.Timestamp(6)
  UpdatedAt DateTime  @db.Timestamp(6)
  DeletedAt DateTime? @db.Timestamp(6)
  User      User      @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Images_Users_UserId")

  @@index([UserId], map: "IX_Images_UserId")
}

model Project {
  Id          String    @id(map: "PK_Projects")
  Name        String
  Description String?
  OwnerId     String
  Published   Boolean   @default(false)
  Subdomain   String?
  Styles      Json?
  CreatedAt   DateTime  @db.Timestamp(6)
  UpdatedAt   DateTime  @db.Timestamp(6)
  DeletedAt   DateTime? @db.Timestamp(6)
  Elements    Element[]
  Pages       Page[]
  Owner       User      @relation(fields: [OwnerId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Projects_Users_OwnerId")

  @@index([OwnerId], map: "IX_Projects_OwnerId")
}

model Page {
  Id        String    @id @map("Id")
  Name      String
  Type      String
  Styles    Json
  ProjectId String
  CreatedAt DateTime  @db.Timestamp(6)
  UpdatedAt DateTime  @db.Timestamp(6)
  DeletedAt DateTime? @db.Timestamp(6)
  Elements  Element[]
  Project   Project   @relation(fields: [ProjectId], references: [Id], onDelete: Cascade)

  @@index([ProjectId])
  @@unique([ProjectId, Name]) // Ensures pages within a project have unique names
}

model Setting {
  Id          String   @id(map: "PK_Settings")
  Name        String
  SettingType String
  Settings    Json
  ElementId   String   @unique
  CreatedAt   DateTime @db.Timestamp(6)
  UpdatedAt   DateTime @db.Timestamp(6)
  DeletedAt   DateTime? @db.Timestamp(6)
  Element     Element? @relation("ElementSettings", fields: [ElementId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Settings_Elements_ElementId")

  @@index([ElementId], map: "IX_Settings_ElementId")
}

model User {
  Id        String    @id(map: "PK_Users")
  Email     String
  FirstName String?
  LastName  String?
  ImageUrl  String?
  CreatedAt DateTime  @db.Timestamptz(6)
  UpdatedAt DateTime  @db.Timestamptz(6)
  Images    Image[]
  Projects  Project[]
}